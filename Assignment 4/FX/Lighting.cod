//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLight;         // Offset:    0, size:   64
    PointLight gPointLight;             // Offset:   64, size:   80
    SpotLight gSpotLight;               // Offset:  144, size:   96
    float3  gEyePosW;                   // Offset:  240, size:   12
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    Material gMaterial;                 // Offset:  192, size:   64
}

//
// 2 local object(s)
//
RasterizerState CullFront
{
    CullMode = uint(FRONT /* 2 */);
};
RasterizerState CullBack
{
    CullMode = uint(BACK /* 3 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 LightTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_temps 4
                itof r0.xyz, l(0, 0, 0, 0)
                itof r1.xyz, l(0, 0, 0, 0)
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                mul r2.xyz, r2.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r2.xyz, r2.xyzx, v0.xyzx
                mov r2.w, l(1.000000)
                dp4 r3.x, r2.xyzw, cb0[8].xyzw
                dp4 r3.y, r2.xyzw, cb0[9].xyzw
                dp4 r3.z, r2.xyzw, cb0[10].xyzw
                dp4 r3.w, r2.xyzw, cb0[11].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                mov o0.xyzw, l(0,0,0,0)
                ret 
                // Approximately 2 instruction slots used
                            
            };
            RasterizerState = CullFront;
        }

        pass P1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_temps 4
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw
                dp4 r1.y, r0.xyzw, cb0[1].xyzw
                dp4 r1.z, r0.xyzw, cb0[2].xyzw
                dp3 r2.x, v1.xyzx, cb0[4].xyzx
                dp3 r2.y, v1.xyzx, cb0[5].xyzx
                dp3 r2.z, v1.xyzx, cb0[6].xyzx
                dp4 r3.x, r0.xyzw, cb0[8].xyzw
                dp4 r3.y, r0.xyzw, cb0[9].xyzw
                dp4 r3.z, r0.xyzw, cb0[10].xyzw
                dp4 r3.w, r0.xyzw, cb0[11].xyzw
                mov o0.xyzw, r3.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                ret 
                // Approximately 16 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLight;                       // Offset:    0 Size:    64
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float3 Position;               // Offset:  112
                //       float Range;                   // Offset:  124
                //       float3 Att;                    // Offset:  128
                //       float pad;                     // Offset:  140
                //
                //   } gPointLight;                     // Offset:   64 Size:    80
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 Ambient;                // Offset:  144
                //       float4 Diffuse;                // Offset:  160
                //       float4 Specular;               // Offset:  176
                //       float3 Position;               // Offset:  192
                //       float Range;                   // Offset:  204
                //       float3 Direction;              // Offset:  208
                //       float Spot;                    // Offset:  220
                //       float3 Att;                    // Offset:  224
                //       float pad;                     // Offset:  236
                //
                //   } gSpotLight;                      // Offset:  144 Size:    96
                //   float3 gEyePosW;                   // Offset:  240 Size:    12
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  192
                //       float4 Diffuse;                // Offset:  208
                //       float4 Specular;               // Offset:  224
                //       float4 Reflect;                // Offset:  240
                //
                //   } gMaterial;                       // Offset:  192 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[16], immediateIndexed
                dcl_constantbuffer cb1[15], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 18
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[15].xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx
                mov r2.xyz, l(0,0,0,0)
                mov r3.xyz, l(0,0,0,0)
                mov r4.xyz, l(0,0,0,0)
                mov r5.xyz, cb1[12].xyzx
                mov r6.xyz, cb1[13].xyzx
                mov r7.xyzw, cb1[14].xyzw
                mov r8.xyz, cb0[0].xyzx
                mov r9.xyz, cb0[1].xyzx
                mov r10.xyz, cb0[2].xyzx
                mov r11.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r12.xyz, l(0,0,0,0)
                mov r13.xyz, l(0,0,0,0)
                mov r11.xyz, -r11.xyzx
                mul r5.xyz, r5.xyzx, r8.xyzx
                dp3 r0.w, r11.xyzx, r0.xyzx
                mov r0.w, r0.w
                lt r1.w, l(0.800000), r0.w
                if_nz r1.w
                  mov r1.w, l(1.000000)
                else 
                  lt r0.w, l(0.500000), r0.w
                  if_nz r0.w
                    mov r1.w, l(0.500000)
                  else 
                    mov r1.w, l(0)
                  endif 
                endif 
                mov r1.w, r1.w
                lt r0.w, l(0.000000), r1.w
                mov r8.xyz, -r11.xyzx
                dp3 r2.w, r8.xyzx, r0.xyzx
                add r2.w, r2.w, r2.w
                mov r2.w, -r2.w
                mul r11.xyz, r0.xyzx, r2.wwww
                add r8.xyz, r8.xyzx, r11.xyzx
                dp3 r2.w, r8.xyzx, r1.xyzx
                max r2.w, r2.w, l(0.000000)
                log r2.w, r2.w
                mul r2.w, r2.w, r7.w
                exp r2.w, r2.w
                mov r2.w, r2.w
                lt r3.w, l(0.800000), r2.w
                if_nz r3.w
                  mov r3.w, l(1.000000)
                else 
                  lt r2.w, l(0.500000), r2.w
                  if_nz r2.w
                    mov r3.w, l(0.500000)
                  else 
                    mov r3.w, l(0)
                  endif 
                endif 
                mov r3.w, r3.w
                mul r6.xyz, r6.xyzx, r1.wwww
                mul r6.xyz, r9.xyzx, r6.xyzx
                mul r7.xyz, r7.xyzx, r3.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx
                movc r6.xyz, r0.wwww, r6.xyzx, r12.xyzx
                movc r7.xyz, r0.wwww, r7.xyzx, r13.xyzx
                mov r5.xyz, r5.xyzx
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                add r2.xyz, r2.xyzx, r5.xyzx
                add r3.xyz, r3.xyzx, r6.xyzx
                add r4.xyz, r4.xyzx, r7.xyzx
                mov r5.xyz, cb1[12].xyzx
                mov r6.xyz, cb1[13].xyzx
                mov r7.xyzw, cb1[14].xyzw
                mov r8.xyz, cb0[4].xyzx
                mov r9.xyz, cb0[5].xyzx
                mov r10.xyz, cb0[6].xyzx
                mov r11.xyz, cb0[7].xyzx
                mov r0.w, cb0[7].w
                mov r12.xyz, cb0[8].xyzx
                mov r13.xyz, v1.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r14.xyz, l(0,0,0,0)
                mov r15.xyz, l(0,0,0,0)
                mov r16.xyz, l(0,0,0,0)
                mov r13.xyz, -r13.xyzx
                add r11.xyz, r11.xyzx, r13.xyzx
                dp3 r1.w, r11.xyzx, r11.xyzx
                sqrt r13.y, r1.w
                lt r0.w, r0.w, r13.y
                if_z r0.w
                  div r11.xyz, r11.xyzx, r13.yyyy
                  mul r14.xyz, r5.xyzx, r8.xyzx
                  dp3 r0.w, r11.xyzx, r0.xyzx
                  mov r0.w, r0.w
                  lt r1.w, l(0.800000), r0.w
                  if_nz r1.w
                    mov r1.w, l(1.000000)
                  else 
                    lt r0.w, l(0.500000), r0.w
                    if_nz r0.w
                      mov r1.w, l(0.500000)
                    else 
                      mov r1.w, l(0)
                    endif 
                  endif 
                  mov r1.w, r1.w
                  lt r0.w, l(0.000000), r1.w
                  mov r5.xyz, -r11.xyzx
                  dp3 r2.w, r5.xyzx, r0.xyzx
                  add r2.w, r2.w, r2.w
                  mov r2.w, -r2.w
                  mul r8.xyz, r0.xyzx, r2.wwww
                  add r5.xyz, r5.xyzx, r8.xyzx
                  dp3 r2.w, r5.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  log r2.w, r2.w
                  mul r2.w, r2.w, r7.w
                  exp r2.w, r2.w
                  mov r2.w, r2.w
                  lt r3.w, l(0.800000), r2.w
                  if_nz r3.w
                    mov r3.w, l(1.000000)
                  else 
                    lt r2.w, l(0.500000), r2.w
                    if_nz r2.w
                      mov r3.w, l(0.500000)
                    else 
                      mov r3.w, l(0)
                    endif 
                  endif 
                  mov r3.w, r3.w
                  mul r5.xyz, r6.xyzx, r1.wwww
                  mul r5.xyz, r9.xyzx, r5.xyzx
                  mul r6.xyz, r7.xyzx, r3.wwww
                  mul r6.xyz, r10.xyzx, r6.xyzx
                  movc r5.xyz, r0.wwww, r5.xyzx, r15.xyzx
                  movc r6.xyz, r0.wwww, r6.xyzx, r16.xyzx
                  mul r13.z, r13.y, r13.y
                  mov r13.x, l(1.000000)
                  dp3 r0.w, r12.xyzx, r13.xyzx
                  div r0.w, l(1.000000), r0.w
                  mul r15.xyz, r0.wwww, r5.xyzx
                  mul r16.xyz, r0.wwww, r6.xyzx
                endif 
                mov r14.xyz, r14.xyzx
                mov r15.xyz, r15.xyzx
                mov r16.xyz, r16.xyzx
                add r2.xyz, r2.xyzx, r14.xyzx
                add r3.xyz, r3.xyzx, r15.xyzx
                add r4.xyz, r4.xyzx, r16.xyzx
                mov r5.xyz, cb1[12].xyzx
                mov r6.xyz, cb1[13].xyzx
                mov r7.xyzw, cb1[14].xyzw
                mov r8.xyz, cb0[9].xyzx
                mov r9.xyz, cb0[10].xyzx
                mov r10.xyz, cb0[11].xyzx
                mov r11.xyz, cb0[12].xyzx
                mov r12.xyz, cb0[13].xyzx
                mov r13.xyz, cb0[14].xyzx
                mov r0.w, cb0[12].w
                mov r1.w, cb0[13].w
                mov r14.xyz, v1.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                mov r15.xyz, l(0,0,0,0)
                mov r16.xyz, l(0,0,0,0)
                mov r17.xyz, l(0,0,0,0)
                mov r14.xyz, -r14.xyzx
                add r11.xyz, r11.xyzx, r14.xyzx
                dp3 r2.w, r11.xyzx, r11.xyzx
                sqrt r14.y, r2.w
                lt r0.w, r0.w, r14.y
                if_z r0.w
                  div r11.xyz, r11.xyzx, r14.yyyy
                  mul r5.xyz, r5.xyzx, r8.xyzx
                  dp3 r0.w, r11.xyzx, r0.xyzx
                  mov r0.w, r0.w
                  lt r2.w, l(0.800000), r0.w
                  if_nz r2.w
                    mov r2.w, l(1.000000)
                  else 
                    lt r0.w, l(0.500000), r0.w
                    if_nz r0.w
                      mov r2.w, l(0.500000)
                    else 
                      mov r2.w, l(0)
                    endif 
                  endif 
                  mov r2.w, r2.w
                  lt r0.w, l(0.000000), r2.w
                  mov r8.xyz, -r11.xyzx
                  dp3 r3.w, r8.xyzx, r0.xyzx
                  add r3.w, r3.w, r3.w
                  mov r3.w, -r3.w
                  mul r0.xyz, r0.xyzx, r3.wwww
                  add r0.xyz, r8.xyzx, r0.xyzx
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  max r0.x, r0.x, l(0.000000)
                  log r0.x, r0.x
                  mul r0.x, r0.x, r7.w
                  exp r0.x, r0.x
                  mov r0.x, r0.x
                  lt r0.y, l(0.800000), r0.x
                  if_nz r0.y
                    mov r0.y, l(1.000000)
                  else 
                    lt r0.x, l(0.500000), r0.x
                    if_nz r0.x
                      mov r0.y, l(0.500000)
                    else 
                      mov r0.y, l(0)
                    endif 
                  endif 
                  mov r0.y, r0.y
                  mul r1.xyz, r6.xyzx, r2.wwww
                  mul r1.xyz, r9.xyzx, r1.xyzx
                  mul r0.xyz, r7.xyzx, r0.yyyy
                  mul r0.xyz, r10.xyzx, r0.xyzx
                  movc r1.xyz, r0.wwww, r1.xyzx, r16.xyzx
                  movc r0.xyz, r0.wwww, r0.xyzx, r17.xyzx
                  mov r6.xyz, -r11.xyzx
                  dp3 r0.w, r6.xyzx, r12.xyzx
                  max r0.w, r0.w, l(0.000000)
                  log r0.w, r0.w
                  mul r0.w, r0.w, r1.w
                  exp r0.w, r0.w
                  mul r14.z, r14.y, r14.y
                  mov r14.x, l(1.000000)
                  dp3 r1.w, r13.xyzx, r14.xyzx
                  div r1.w, r0.w, r1.w
                  mul r15.xyz, r0.wwww, r5.xyzx
                  mul r16.xyz, r1.wwww, r1.xyzx
                  mul r17.xyz, r0.xyzx, r1.wwww
                endif 
                mov r15.xyz, r15.xyzx
                mov r16.xyz, r16.xyzx
                mov r17.xyz, r17.xyzx
                add r0.xyz, r2.xyzx, r15.xyzx
                add r1.xyz, r3.xyzx, r16.xyzx
                add r2.xyz, r4.xyzx, r17.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx
                mov r0.w, cb1[13].w
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 252 instruction slots used
                            
            };
            RasterizerState = CullBack;
        }

    }

}

